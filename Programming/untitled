def read_parameters(parameter_file):
		# Fetch self.data
		self.data = self.fetch_self.data(parameter_file)

		# Read initial self.data from file to calculate indices correctly
		self.volume_bounds 						= [float(i) for i in self.data[self.index_of_actions].strip().split("\t")]
		self.q_array 							= (list(self.data[self.index_of_q_bounds].strip().split("\t")))
		self.min_q, self.max_q 					= float(q_array[0]), float(q_array[1])
		temp_list 								= list(self.data[2].strip().split("\t"))
		self.number_of_dps 						= int(temp_list[0])
		self.number_of_production_units 		= int(temp_list[1])
		self.number_of_self.scenarios 			= int(temp_list[2])
		self.bm_upper_bound						= int(temp_list[3])
		self.number_of_price_levels				= int(temp_list[4])

		# How the input file should be read Part 2
		self.index_of_self.scenario_inflows 	= self.index_of_self.scenario_probabilities + 1
		self.index_of_self.scenarios 			= self.index_of_self.scenario_probabilities + 1 + self.number_of_dps
		self.index_of_bm_price 					= self.index_of_self.scenarios + self.number_of_dps * self.number_of_trading_stages
		self.index_of_transaction_costs 		= self.index_of_bm_price + 1 + self.number_of_dps # If necessary, modify this
		self.index_of_cpr 						= self.index_of_transaction_costs + 1
		self.index_of_production_quantities 	= self.index_of_transaction_costs + 3
		self.index_of_production_costs 			= self.index_of_production_quantities + self.number_of_production_units
		self.index_of_initial_storage 			= self.index_of_production_costs + self.number_of_production_units + 1
		self.index_of_storage_bounds 			= self.index_of_initial_storage + 1
		self.index_of_overflow					= self.index_of_storage_bounds + 1
		self.index_of_volume_levels				= self.index_of_overflow + 2
		self.index_of_price_levels 				= self.index_of_volume_levels + 1 + self.number_of_dps * self.number_of_trading_stages * self.number_of_price_levels

		# self.data structures
		self.scenario_probabilities 			= [float(i) for i in self.data[self.index_of_self.scenario_probabilities].split()]
		self.scenario_inflows 					= [[float(i) for i in self.data[self.index_of_self.scenario_inflows+j].split("\t")] for j in range(self.number_of_dps)]
		self.scenarios 							= [[] for i in range(self.number_of_dps)]
		self.scenario_production_capacities		= [[] for i in range(self.number_of_production_units)]
		self.scenario_production_costs 			= [[] for i in range(self.number_of_production_units)]
		self.transaction_cost 					= float(self.data[self.index_of_transaction_costs])
		self.production_cost 					= [float(i) for i in self.data[self.index_of_production_costs].strip().split("\t")]
		self.production_capacities 				= [float(i) for i in self.data[self.index_of_production_quantities].strip().split("\t")]
		self.cpr 								= float(self.data[self.index_of_cpr])
		temp_list 								= self.data[self.index_of_storage_bounds].split("\t")[:2]
		self.storage_bounds 					= [float(i) for i in temp_list]
		initial_storage 						= float(self.data[self.index_of_initial_storage])
		self.bms 								= [[float(i) for i in self.data[self.index_of_bm_price+x].strip().split("\t")] for x in range(self.number_of_dps)]
		self.price_levels 						= [[[[] for p in range(self.number_of_price_levels)] for t in range(self.number_of_trading_stages)] for dp in range(self.number_of_dps)]
		self.volume_levels 						= [[[[] for p in range(self.number_of_price_levels)] for t in range(self.number_of_trading_stages)] for dp in range(self.number_of_dps)]

		for pu in range(self.number_of_production_units):
			self.scenario_production_costs[pu] 		= [float(i) for i in self.data[self.index_of_production_quantities+pu].split("\t")]
			self.scenario_production_capacities[pu] = [float(i) for i in self.data[self.index_of_production_quantities+pu+number_of_production_units].split("\t")]
			
		for dp in range(self.number_of_dps):
			self.scenarios[dp] 						= [[] for j in range(self.number_of_trading_stages)]
			for i in range(self.number_of_trading_stages):
				self.scenarios[dp][i] 				= [float(j) for j in self.data[self.index_of_self.scenarios+i * self.number_of_dps+dp].split("\t")]
		
		for dp in range(self.number_of_dps):
			for t in range(self.number_of_trading_stages):
				for p in range(self.number_of_price_levels):
					self.volume_levels[dp][t][p] 	= [float(i) for i in self.data[self.index_of_volume_levels+dp*(self.number_of_trading_stages+self.number_of_price_levels)+t*self.number_of_price_levels+p].strip().split("\t")]
					self.price_levels[dp][t][p] 	= [float(i) for i in self.data[self.index_of_price_levels+dp*(self.number_of_trading_stages+self.number_of_price_levels)+t*self.number_of_price_levels+p].strip().split("\t")]
		

		self.allow_overflow = True if str(self.data[self.index_of_overflow]).strip() == "1" else False
